assert(turtle, "This api is for turtles only")
assert(go, "This api requires the 'go' api")
assert(config, "This api requires the 'config' api")

local function dropoff(all)
	for i = 1, 16 do
		turtle.select(i)
		-- put fuel in fuel chest if possible
		if turtle.refuel(0) then
			if not turtle.dropUp(64) then turtle.drop(64) end
		else
			turtle.drop(64)
		end
	end
end

function refuel(target)
	for i = 1, 16 do
		turtle.select(i)
		if turtle.refuel(0) then
			while turtle.getFuelLevel() < target and turtle.getItemCount(i) > 0 do
				turtle.refuel(1)
			end
		end
		if turtle.getFuelLevel() > target then
			break
		end
	end
	return turtle.getFuelLevel()
end

function mineSides()
	turtle.select(1)
	for i = 1, 4 do
		while turtle.suck() do end
		turtle.dig()
		go.right()
	end
end

function mineShaft()
	--local startPos = go.getPos()
	local freeslots = 0
	local descended = 0
	local shaft = config.get("shaft")
	while true do
		mineSides()
		freeslots = 0
		for i = 1, 16 do
			if turtle.getItemCount(i) == 0 then
				freeslots = freeslots + 1
			end
		end
		if not freeslots == 0 then
			turtle.digDown()
		else
			local oldpos = go.getPos()
			print("Dropping off items")
			go.goto(config.get("dropoff"))
			dropoff()
			print("Going to shaft location")
			local pos = go.getPos()
			local dropoff = config.get("dropoff")
				if pos.x == dropoff.x and pos.z == dropoff.z then
			go.goto(nil,nil,pos.z+1) -- don't break fuel chest
			end
			go.goto(shaft.x,65,shaft.z+2) -- attempt to prevent turtles breaking eachother by having turtles use different Y levels
			go.goto(oldpos.x,oldpos.y,oldpos.z)
		end
		while turtle.attackDown() do end
		if not go.down() then break end
		descended = descended + 1
	end
	return descended
end
